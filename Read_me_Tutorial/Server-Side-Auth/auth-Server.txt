Supabase Auth with the Next.js App Router
------------------------------------------

https://supabase.com/docs/guides/auth/auth-helpers/nextjs
# ------------------------------------------------------

Install Next.js Auth helpers library
npm install @supabase/auth-helpers-nextjs @supabase/supabase-js

Declare environment variables
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key

Managing session with middleware
# -----------------------------------
{ Code :: 
# -----------------------------------
        import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
        import { NextResponse } from 'next/server'
        
        export async function middleware(req) {
        const res = NextResponse.next()
        
        // Create a Supabase client configured to use cookies
        const supabase = createMiddlewareClient({ req, res })
        
        // Refresh session if expired - required for Server Components
        await supabase.auth.getSession()
        
        return res
        }
# -----------------------------------
}


Managing sign-in with Code Exchange
# --------------------------------------
{ Code ::
    # --------------------------------------------------
    import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
    import { cookies } from 'next/headers'
    import { NextResponse } from 'next/server'

    export async function GET(request) {
    const requestUrl = new URL(request.url)
    const code = requestUrl.searchParams.get('code')

    if (code) {
        const cookieStore = cookies()
        const supabase = createRouteHandlerClient({ cookies: () => cookieStore })
        await supabase.auth.exchangeCodeForSession(code)
    }

    // URL to redirect to after sign in process completes
    return NextResponse.redirect(requestUrl.origin)
    }
    # --------------------------------------------------
}

Server-side :: Sign up route
# ------------------------------------------
{ Code ::
    # -+----------------------------------------
    import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
    import { cookies } from 'next/headers'
    import { NextResponse } from 'next/server'

    export async function POST(request) {
    const requestUrl = new URL(request.url)
    const formData = await request.formData()
    const email = formData.get('email')
    const password = formData.get('password')
    const cookieStore = cookies()
    const supabase = createRouteHandlerClient({ cookies: () => cookieStore })

    await supabase.auth.signUp({
        email,
        password,
        options: {
        emailRedirectTo: `${requestUrl.origin}/auth/callback`,
        },
    })

    return NextResponse.redirect(requestUrl.origin, {
        status: 301,
    })
    }
    # -------------------------------------------
}

Server-side :: Login route
# ------------------------------------------
{ Code ::
    # ------------------------------------------
    import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
    import { cookies } from 'next/headers'
    import { NextResponse } from 'next/server'

    export async function POST(request) {
    const requestUrl = new URL(request.url)
    const formData = await request.formData()
    const email = formData.get('email')
    const password = formData.get('password')
    const cookieStore = cookies()
    const supabase = createRouteHandlerClient({ cookies: () => cookieStore })

    await supabase.auth.signInWithPassword({
        email,
        password,
    })

    return NextResponse.redirect(requestUrl.origin, {
        status: 301,
    })
    }
    # ------------------------------------------
}

Server-side :: Logout route
# -------------------------------------------
{ Code ::
    # ------------------------------

    import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
    import { cookies } from 'next/headers'
    import { NextResponse } from 'next/server'
    
    export async function POST(request) {
      const requestUrl = new URL(request.url)
      const cookieStore = cookies()
      const supabase = createRouteHandlerClient({ cookies: () => cookieStore })
    
      await supabase.auth.signOut()
    
      return NextResponse.redirect(`${requestUrl.origin}/login`, {
        status: 301,
      })
    }
}

Server-side :: Login page ::
# -------------------------------------------
{ Code ::
    # -------------------------------------------
    export default function Login() {
        return (
          <form action="/auth/login" method="post">
            <label htmlFor="email">Email</label>
            <input name="email" />
            <label htmlFor="password">Password</label>
            <input type="password" name="password" />
            <button>Sign In</button>
            <button formAction="/auth/sign-up">Sign Up</button>
            <button formAction="/auth/logout">Sign Out</button>
          </form>
        )
      }
    # -------------------------------------------
}

Server-side :: Home page ::
# -------------------------------------------
{ Code ::
    # ---------------------------
    import React from 'react'

    // ------------------------------------------
    import { cookies } from 'next/headers'
    import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'
    // ------------------------------------------
    const Admin = async () => {

        // -------------------------------------
        const cookieStore = cookies()
        const supabase = createServerComponentClient({ cookies: () => cookieStore })
        const { data } = await supabase.auth.getUser();
        // -------------------------------------

        return (
            <>
                <pre>{JSON.stringify(data, null, 2)}</pre>
            </>
        )
    }

    export default Admin
    # ---------------------------
}



