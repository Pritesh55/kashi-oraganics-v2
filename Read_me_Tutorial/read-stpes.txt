Table Editor :: kashi organics
=> https://supabase.com/dashboard/projects
=> https://supabase.com/dashboard/project/okfvfltvjlpvzhiqhgyp


Tutorial :: Nextjs with supabase
https://supabase.com/docs/guides/getting-started/tutorials/with-nextjs?language=js#initialize-a-nextjs-app

Initialize a Next.js app
----------------------------

<# 01 #> npx create-next-app@latest --use-npm kashi-oraganics-v1;

√ Would you like to use TypeScript? ... No / Yes 
Ans :: No (We will use JvaScript...)

√ Would you like to use ESLint? ... No / Yes
Ans :: Yes

√ Would you like to use Tailwind CSS? ... No / Yes
Ans :: Yes

√ Would you like to use `src/` directory? ... No / Yes
Ans :: Yes

√ Would you like to use App Router? (recommended) ... No / Yes
Ans :: Yes

√ Would you like to customize the default import alias (@/*)? ... No / Yes
Ans :: No

<# 02 #> cd .\kashi-oraganics-v1\
// After typing cd, Press Tab key :: to auto select Created folder

<# 03 #> code .
// go to visual studio code... 

<# 04 #> npm run dev
// Run on browser chrome 

(Chrome Browser)
Go to :: http://localhost:3000

(in powershell) 
Ctrl + Click ::  
Local:        http://localhost:3000

# --------------------------------------------------------------------
v2 :: 02-Add-Local-Repository-to-Github With Github-desktop ::

-----------------------------------------
v3 :: 03-Deploy-your-project-to-vercel
https://vercel.com/dashboard

-------------------------------------------------------------
App styling (optional) ::
https://github.com/supabase/supabase/blob/master/examples/user-management/nextjs-user-management/app/globals.css

--------------------------------------------

https://supabase.com/docs/guides/auth/auth-helpers/nextjs?language=js#install-nextjs-auth-helpers-library

install the Supabase client library: supabase-js
-----------------------------------
<# 05 #> npm install @supabase/supabase-js


Install the auth helpers for Next.js
-------------------------------------
<# 06 #> npm install @supabase/auth-helpers-nextjs


middleware
-------------
Create a new "middleware.js" file in the root of your project...
Then Copy-paste below code to "middleware.js"
----------------------------------------------------
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'

export async function middleware(req) {
  const res = NextResponse.next()

  // Create a Supabase client configured to use cookies
  const supabase = createMiddlewareClient({ req, res })

  // Refresh session if expired - required for Server Components
  await supabase.auth.getSession()

  return res
}

// Ensure the middleware is only called for relevant paths.
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
}
----------------------------------------------------

Managing sign-in with Code Exchange ::

Create a new file at app/auth/callback/route.js
Then Copy-paste below code to "route.js"....
----------------------------------------------------
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

export async function GET(request) {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')

  if (code) {
    const cookieStore = cookies()
    const supabase = createRouteHandlerClient({ cookies: () => cookieStore })
    await supabase.auth.exchangeCodeForSession(code)
  }

  // URL to redirect to after sign in process completes
  return NextResponse.redirect(requestUrl.origin)
}
----------------------------------------------------

Authentication ::
-------------------


https://supabase.com/dashboard/project/okfvfltvjlpvzhiqhgyp/auth/users




# Home page ::
----------------
<div className="text-white absolute top-5 right-5 ">
<Link href={'/login'}
  // onClick={() => { goToPayment(); }} 
  className="btn-tp bg-transparent text-white border-2 border-solid border-orange-400 rounded-lg focus:outline-none justify-center items-center gap-2 text-sm md:text-lg leading-6 py-2 px-4 md:px-8 font-medium  hidden md:inline-flex ">
  Login
</Link>
</div>



{
  "id": 1,
  "created_at": "2023-12-29T17:54:24.444452+00:00",
  "pt_title": "Valmiki Ramayana",
  "pt_description": " Lorem ipsum, dolor sit amet consectetur adipisicing elit. Possimus voluptatibus officia iste consequatur saepe quas sapiente sunt aliquam iure accusantium sequi repellendus, perferendis temporibus obcaecati id deleniti culpa totam distinctio sint nihil.",
  "pt_price": 450,
  "pt_category": "Itihas",
  "pt_brand": "Gita Press",
  "pt_images": "https://dummyimage.com/400x301",
  "pt_discount_percent": 20,
  "pt_stock": 25,
  "pt_rating": 4.5,
  "pt_photo_thumbnail": null,
  "list_number": 1
  },
  {
  "id": 10,
  "created_at": "2023-12-29T22:28:36.936474+00:00",
  "pt_title": "iPhone X",
  "pt_description": "SIM-Free, Model A19211 6.5-inch Super Retina HD display with OLED technology A12 Bionic chip with ...",
  "pt_price": 899,
  "pt_category": "smartphones",
  "pt_brand": "Apple",
  "pt_images": "https://i.dummyjson.com/data/products/2/1.jpg",
  "pt_discount_percent": 17,
  "pt_stock": null,
  "pt_rating": 4.1,
  "pt_photo_thumbnail": null,
  "list_number": 2
  },
  {
  "id": 14,
  "created_at": "2023-12-29T22:44:29.741371+00:00",
  "pt_title": "Gulab Powder 50 Gram",
  "pt_description": "Dry Rose Flower Powder Gulab Powder 50 Gram • Treats Wounds",
  "pt_price": 45,
  "pt_category": "groceries",
  "pt_brand": "Dry Rose",
  "pt_images": "https://i.dummyjson.com/data/products/25/1.png",
  "pt_discount_percent": 15,
  "pt_stock": 47,
  "pt_rating": 4.1,
  "pt_photo_thumbnail": null,
  "list_number": 3
  },
  {
  "id": 38,
  "created_at": "2023-12-30T02:41:06.204011+00:00",
  "pt_title": "Ubtan Facewash",
  "pt_description": "",
  "pt_price": 50,
  "pt_category": "",
  "pt_brand": "",
  "pt_images": "",
  "pt_discount_percent": null,
  "pt_stock": null,
  "pt_rating": null,
  "pt_photo_thumbnail": "",
  "list_number": 4
  }































Next.js middleware ::
------------------------
Create a "middleware.js" file at root path

and copy-paste the following code....
-----------------------------------------------------------------------------
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'

export async function middleware(req) {
  const res = NextResponse.next()

  // Create a Supabase client configured to use cookies
  const supabase = createMiddlewareClient({ req, res })

  // Refresh session if expired - required for Server Components
  await supabase.auth.getSession()

  return res
}

// Ensure the middleware is only called for relevant paths.
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
}
-----------------------------------------------------------------------------

Set up a login component ::
-----------------------------

npm install @supabase/auth-ui-react @supabase/auth-ui-shared


Create an "AuthForm" client side component ::
----------------------------------------------
'use client'
import { Auth } from '@supabase/auth-ui-react'
import { ThemeSupa } from '@supabase/auth-ui-shared'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'

export default function AuthForm() {
  const supabase = createClientComponentClient()

  return (
    <Auth
      supabaseClient={supabase}
      view="magic_link"
      appearance={{ theme: ThemeSupa }}
      theme="dark"
      showLinks={false}
      providers={[]}
      redirectTo={`${process.env.REDIRECT_URL}/auth/callback`}
    />
  )
}

------------------------------------------------------
`} 
--> Edit 
From :: redirectTo="" => 
To   :: redirectTo={`${process.env.REDIRECT_URL}/auth/callback`} 

`} 
-----------------------------------------------------------------



Add the AuthForm component to your home page
-------------------------------------
import AuthForm from "./components/AuthForm";

export default function Home() {
  return (
    <div className="row">
      <div className="col-6">
        <h1 className="header">Supabase Auth + Storage</h1>
        <p className="">
          Experience our Auth and Storage through a simple profile management example. Create a user
          profile and upload an avatar image. Fast, simple, secure.
        </p>
      </div>
      <div className="col-6 auth-widget">
        <AuthForm />
      </div>
    </div>
  )
}

-------------------------------------
--> Edit :: 
from ::  import AuthForm from './auth-form'; 
To   ::  import AuthForm from "./components/AuthForm";

-------------------------------------------------------------

Proof Key for Code Exchange (PKCE)
------------------------------------
Create file route.js at "auth / callback / route.js"



src/app/ => auth / callback / route.js
----------------------------------------------
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

export async function GET(req) {
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })
  const { searchParams } = new URL(req.url)
  const code = searchParams.get('code')

  if (code) {
    await supabase.auth.exchangeCodeForSession(code)
  }

  return NextResponse.redirect(new URL('/account', req.url))
}


Sign out ::
--------------
src/app =>  app/auth/signout/route.js
------------------------------------------
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

export async function POST(req) {
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })

  // Check if we have a session
  const {
    data: { session },
  } = await supabase.auth.getSession()

  if (session) {
    await supabase.auth.signOut()
  }

  return NextResponse.redirect(new URL('/', req.url), {
    status: 302,
  })
}
--------------------------------------------------------


------------------------------------------------------------

# यदि user_id duplicate Error (23505) आती हैं तो , इसका मतलब user_id तो हैं ,तो उसके बाद email_id update करने के लिए ....
if (uaptError.code == 23505) {
  // emuppr :: "em ail_id" is "Up dated" to "Pr ofiles" "T able"
  // -------------------------------------
  const { data: emupprt, error } = await supabase
      .from('profiles')
      .update({ email_id: sessionData.session.user.email })
      .eq('user_id', sessionData.session.user.id)
      .select();
}






# ----------------------------------------------------------------------------------
// Find by user_id
// -------------------
const { data: findUserData, error: findUserError } = await supabase
    .from('profiles')
    .select()
    .eq('user_id', sessionData.session.user.id);

// console.log(findUserData);
// console.log(findUserError);

if (findUserData !== null &&
    findUserData[0] !== undefined &&
    findUserError == null) {
    console.log(`findUserData ::`);
    console.log(findUserData);
    // console.log(findUserError);
}

else {

    // uapt :: "user" is "Added" to "Profiles" "Table"
    // -------------------------------------
    const { data: uaptData, error: uaptError } = await supabase
        .from('profiles')
        .insert({ user_id: `${sessionData.session.user.id}`, email_id: sessionData.session.user.email })
        .select();
    // -------------------------------------
    console.log(`"user" is "Added" to "Profiles" "Table ?"=`, uaptData);
    if (uaptError) {
        console.log(uaptError?.code);
        // -------------------------------------
    }

}

# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------










